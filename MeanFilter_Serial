


public class MeanFilter_Serial
{
    private String inputFileName; 
    private String outputFileName; 
    private int windowSize; 
    private BufferedImage imageInput;
    private BufferedImage imageOutput; 

    public MeanFilter_Serial(String inputFileName, int windowSize) throws IOException
    {
        this.inputFileName = inputFileName;
        this.outputFileName = inputFileName + "_MeanFilter_Serial"
        try
        {
            this.imageInput = CreateBufferedImage(inputFileName); 
            this.imageOutput = GetOutputImage(imageInput, windowSize)
            CreateOutputFile(imageOutput, outputFile)
        }
        catch(Exception ex)
        {
            return System.out.println("Could not make buffered image: "+ ex)
        }
    }

    private BufferedImage CreateBufferedImage(String inputFileName)
    {
        File imageFile = new File(inputFileName); 
        BufferedImage inputImage = ImageIO.read(imageFile);
        return inputImage; 
    }

    private BufferedImage GetOutputImage(BufferedImage inputImage, int windowSize)
    {
        int windowRadius = windowSize/2; 
        int imageWidth = inputImage.getWidth(); 
        int imageHeight = inputImage.getHeight(); 
        BufferedImage outputImage = inputImage; 
        /*
        changing the middle pixel of the window, therefore we need at least
        half the window size (the window radius) on each side, therefore i starts
        at the window Radius and ends with a radius length on the left
        */
        for(int widthPointer=windowRadius; widthPointer<imageWidth-windowRadius; widthPointer++)
        {
            //same as width
            for(int heightPointer=windowRadius; heightPointer<imageHeight-windowRadius; heightPointer++)
            {
                //now the counters sit on a target pixel to change
                int pixel=0, a=0, r=0, g=0, b=0;
                int alphaSum=0; int redSum=0; int greenSum=0; int blueSum =0; 
                /*
                  get the target pixel's surrounding pixels colors
                 */
               for(int innerWindowWidthPointer=widthPointer-windowRadius;innerWindowWidthPointer<widthPointer+windowRadius; innerWindowWidthPointer++)
               {
                for(int innerWindowHeightPointer=heightPointer-windowRadius; innerWindowHeightPointer<heightPointer+windowRadius+1; innerWindowHeightPointer++)
                {
                    pixel = inputImage.getRGB(innerWindowWidthPointer,innerWindowHeightPointer); 
                    alphaSum += (pixel>>24) & 0xff; 
                    redSum += (pixel>>16) & 0xff; 
                    greenSum += (pixel>>8) & 0xff; 
                    blueSum += pixel & 0xff;  
                }
               } 
               int totalPixels = windowSize^2; 
               int meanA =alphaSum/totalPixels; 
               int meanR =RedSum/totalPixels; 
               int meanG =greenSum/totalPixels; 
               int meanB =blueSum/totalPixels; 
               pixel = (meanA<<24)|(meanR<<16)|(meanG<<8)|meanB;
               outputImage.setRGB(widthPointer, heightPointer, pixel)
            }
        }
        return outputImage; 
    }
    
    private void CreateOutputFile(string fileName, BufferedImage outputImage)
    {
        try
        {
            File outputFile = new File(fileName); 
            ImageIO.write(outputImage, "jpeg", outputFile);
        }
        catch(Exception ex)
        {
            return System.out.println("Could not return buffered image file: "+ ex); 
        }
    }




}